// https://github.com/Microsoft/vscode-cpptools/blob/master/launch.md
{
    "version": "0.2.0",
    "configurations": [
        {
            "name": "(gdb) Launch+",
            "type": "cppdbg",
            "request": "launch",
            "program": "${workspaceRoot}/${fileBasenameNoExtension}.exe",
            "args": [],
            "stopAtEntry": false,
            "cwd": "${workspaceRoot}",
            "environment": [],
            "externalConsole": true,
            "MIMode": "gdb",
            "miDebuggerPath": "C:\\LLVM\\bin\\gdb.exe",
            "setupCommands": [
                {
                    "description": "Enable pretty-printing for gdb",
                    "text": "-enable-pretty-printing",
                    "ignoreFailures": true
                }
            ],
            "preLaunchTask": "build",
        }
        ,
        { "name": "C++ Launch (GDB)", // 配置名稱,將會在啟動配置的下拉選單中顯示 
            "type": "cppdbg", // 配置型別,這裡只能為cppdbg 
            "request": "launch", // 請求配置型別,可以為launch(啟動)或attach(附加) 
            "launchOptionType": "Local", // 偵錯程式啟動型別,這裡只能為Local 
            "targetArchitecture": "x64", // 生成目標架構,一般為x86或x64,可以為x86, arm, arm64, mips, x64, amd64, x86_64 
            "program": "${file}.exe", // 將要進行除錯的程式的路徑 
            "miDebuggerPath":"a://MinGW//bin//gdb.exe", // miDebugger的路徑,注意這裡要與MinGw的路徑對應 
            "args": ["blackkitty", "1221", "# #"], // 程式除錯時傳遞給程式的命令列引數,一般設為空即可 
            "stopAtEntry": false, // 設為true時程式將暫停在程式入口處,一般設定為false 
            "cwd": "${workspaceRoot}", // 除錯程式時的工作目錄,一般為${workspaceRoot}即程式碼所在目錄 
            "externalConsole": true, // 除錯時是否顯示控制檯視窗,一般設定為true顯示控制檯 
            "preLaunchTask": "Compile" // 除錯會話開始前執行的任務,一般為編譯程式,c++為g++, c為gcc }
        },
        {
            "name": "(gdb) Launch", // 配置名称，将会在启动配置的下拉菜单中显示
            "type": "cppdbg", // 配置类型，这里只能为cppdbg
            "request": "launch", // 请求配置类型，可以为launch（启动）或attach（附加）
            "program": "${fileDirname}/${fileBasenameNoExtension}.exe", // 将要进行调试的程序的路径
            "args": [], // 程序调试时传递给程序的命令行参数，一般设为空即可
            "stopAtEntry": false, // 设为true时程序将暂停在程序入口处，我一般设置为true
            "cwd": "${workspaceFolder}", // 调试程序时的工作目录
            "environment": [], // （环境变量？）
            "externalConsole": true, // 调试时是否显示控制台窗口，一般设置为true显示控制台
            "internalConsoleOptions": "neverOpen", // 如果不设为neverOpen，调试时会跳到“调试控制台”选项卡，你应该不需要对gdb手动输命令吧？
            "MIMode": "gdb", // 指定连接的调试器，可以为gdb或lldb。但目前lldb在windows下没有预编译好的版本。
            "miDebuggerPath": "gdb.exe", // 调试器路径，Windows下后缀不能省略，Linux下则去掉
            "setupCommands": [ // 用处未知，模板如此
                {
                    "description": "Enable pretty-printing for gdb",
                    "text": "-enable-pretty-printing",
                    "ignoreFailures": false
                }
            ],
            "preLaunchTask": "Compile" // 调试会话开始前执行的任务，一般为编译程序。与tasks.json的label相对应
        }
    ]
}